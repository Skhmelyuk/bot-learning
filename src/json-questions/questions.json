{
  "html": [
    {
      "id": 1,
      "text": "Який тег використовується для створення посилання?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Який тег використовується для вставки зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Який тег у <html> визначає заголовок документа?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": false },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": true },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Який атрибут використовується для визначення альтернативного тексту зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Який атрибут дозволяє відкрити посилання в новій вкладці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Для чого використовується атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder' використовується для відображення текстової підказки або прикладу введення в полі форми до того, як користувач почне вводити свої дані. Це допомагає користувачам зрозуміти, які дані потрібно ввести в поле форми. \n\nПриклад: \n\n<code>&lt;input type='text' placeholder='Введіть ваше ім'я'&gt;</code> \n\nЦе відобразить текст 'Введіть ваше ім'я' у полі введення, який зникне, коли користувач почне вводити свої дані. \n\nДетальніше: <a href='https://css.in.ua/html/tag/input/placeholder'>Статья про 'placeholder'</a>"
    },
    {
      "id": 7,
      "text": "Як створити неупорядкований список в HTML?",
      "hasOptions": false,
      "answer": "Для створення такого списку в HTML використовується тег <code>&lt;ul&gt;</code>, а для визначення кожного пункту списку - тег <code>&lt;li&gt;</code>. \n\nПриклад:\n\n<code>&lt;ul&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;</code>\n\nЦе створить список з трьох пунктів без нумерації. \n\nДетальніше: <a href='https://www.css.in.ua/html/tag/ul'>Статья про &lt;ul&gt;</a>"
    },
    {
      "id": 8,
      "text": "Що таке HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - це стандартизована мова розмітки, що використовується для створення та розробки веб-сторінок. Це система для розмітки окремих частин веб-сторінки з використанням тегів, укладених у кутові дужки. HTML визначає структуру та зміст веб-сторінки, а також включає посилання на зовнішні ресурси, такі як зображення, таблиці, аудіо та відео файли. \n\nДетальніше: <a href='https://www.css.in.ua/article/shcho-take-css_3'>Статья про HTML</a>"
    },
    {
      "id": 9,
      "text": "Що робить тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "Це декларація, яка інформує веб-браузер про версію мови розмітки, використану при створенні веб-сторінки. Це допомагає браузеру правильно відобразити сторінку.\n\nДетальніше: <a href='https://css.in.ua/html/tag/doctype'>Статья про &lt;!DOCTYPE&gt;</a>"
    },
    {
      "id": 10,
      "text": "Який тег використовується для створення таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який тег використовується для створення заголовка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": true },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": false },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який тег використовується для створення рядка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Який тег використовується для створення комірки таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Що таке семантика, які семантичні теги ви знаєте?",
      "hasOptions": false,
      "answer": "<b>Семантика</b> в HTML відноситься до використання тегів, які мають чітке значення щодо свого змісту та призначення. Вона допомагає як людям, так і пошуковим системам краще розуміти структуру і зміст веб-сторінки. Семантичні теги описують конкретні частини контенту і допомагають створювати більш зрозумілі та доступні сайти. \n\nПриклади семантичних тегів: \n\n&lt;header&gt;&lt;/header&gt; \n&lt;footer&gt;&lt;/footer&gt; \n&lt;article&gt;&lt;/article&gt; \n&lt;section&gt;&lt;/section&gt; \n&lt;nav&gt;&lt;/nav&gt; та інші. \n\nВони допомагають створювати більш структуровані та доступні веб-сторінки. \n\nДетальніше: <a href='https://elit-web.ua/blog/semanticheskaya-verstka-sajta'>Статья про семантику</a>"
    },
    {
      "id": 15,
      "text": "Яка властивість використовується для встановлення фонового зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Який тег використовується для створення випадаючого списку?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Який тег використовується для вставки коду JavaScript в HTML документ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Який атрибут використовується для встановлення посилання на CSS файл?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "href", "isCorrect": true },
        { "id": 3, "text": "rel", "isCorrect": false },
        { "id": 4, "text": "link", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Який тег використовується для створення форми в HTML?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<input>", "isCorrect": false },
        { "id": 2, "text": "<form>", "isCorrect": true },
        { "id": 3, "text": "<textarea>", "isCorrect": false },
        { "id": 4, "text": "<fieldset>", "isCorrect": false }
      ]
    },
    {
      "id": 20,
      "text": "Який атрибут використовується для автоматичного фокусування на елементі?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "autofocus", "isCorrect": true },
        { "id": 2, "text": "focus", "isCorrect": false },
        { "id": 3, "text": "auto", "isCorrect": false },
        { "id": 4, "text": "setfocus", "isCorrect": false }
      ]
    },
    {
      "id": 21,
      "text": "Базова структура HTML документа?",
      "hasOptions": false,
      "answer": "Базова структура HTML є основою будь-якої веб-сторінки та включає основні теги, які формують документ. Ось основні компоненти:\n\n<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- Content here --&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code>\n\nДетальніше: <a href='https://vyspiansky.gitbook.io/introduction-to-web-development/html/document-structure'>Статья про структуру HTML</a>"
    },
    {
      "id": 22,
      "text": "Яка різниця між тегами <strong>; <em>; і <b> <i>? Які ви використовуєте і коли?",
      "hasOptions": false,
      "answer": "Теги &lt;strong&gt; та &lt;em&gt; використовуються для визначення важливого тексту та тексту, який потрібно виділити, відповідно. Вони мають семантичне значення. Теги &lt;b&gt; та &lt;i&gt; використовуються для визначення жирного та курсивного тексту відповідно. Вони не мають семантичного значення. Якщо важливо підкреслити текст, використовуйте &lt;strong&gt; та &lt;em&gt;. Якщо потрібно змінити стиль тексту, використовуйте &lt;b&gt; та &lt;i&gt;."
    },
    {
      "id": 23,
      "text": "Які теги використовуються для створення списків?",
      "hasOptions": false,
      "answer": "Для створення списків в HTML використовуються теги: \n&lt;ul&gt; (неупорядкований список) \n&lt;ol&gt; (упорядкований список) \n&lt;dl&gt; (список термінів) \nДля визначення кожного пункту списку використовується тег &lt;li&gt;. \n\nДетальніше: <a href='https://cpto.dp.ua/public_html/posibnyky/basic_html/urok3.html'>Створення списків</a>"
    },
    {
      "id": 24,
      "text": "Які теги використовуються для створення таблиці?",
      "hasOptions": false,
      "answer": "Для створення таблиці в HTML використовуються теги: \n&lt;table&gt; (таблиця) \n&lt;tr&gt; (рядок) \n&lt;th&gt; (заголовок)  \n&lt;td&gt; (комірка) \nТакож можна використовувати теги \n&lt;thead&gt; \n&lt;tbody&gt; \n&lt;tfoot&gt; \nдля групування рядків таблиці. Для створення заголовка таблиці використовується тег &lt;caption&gt;. \n\nДетальніше: <a href='https://css.in.ua/html/tag/table'>Статья про &lt;table&gt;</a>"
    },
    {
      "id": 25,
      "text": "Які теги використовуються для створення форми?",
      "hasOptions": false,
      "answer": "Для створення форми в HTML використовуються теги: \n&lt;form&gt; (форма) \n&lt;input&gt; (поле вводу) \n&lt;textarea&gt; (текстове поле) \n&lt;select&gt; (випадаючий список)  \n&lt;button&gt; (кнопка) \n\nДетальніше: <a href='https://www.css.in.ua/html/tag/form'>Статья про &lt;form&gt;</a>"
    },
    {
      "id": 26,
      "text": "Які теги використовуються для створення посилання?",
      "hasOptions": false,
      "answer": "Для створення посилання в HTML використовується тег &lt;a&gt;. \n\nПриклад: \n\n&lt;a href='https://css.in.ua'&gt;Посилання&lt;/a&gt; \n\nЦе створить посилання з текстом 'Посилання', яке веде на сайт 'https://css.in.ua'. \n\nДетальніше: <a href='https://css.in.ua/html/tag/a'>Статья про &lt;a&gt;</a>"
    },
    {
      "id": 27,
      "text": "Які теги використовуються для вставки зображення?",
      "hasOptions": false,
      "answer": "Для вставки зображення в HTML використовується тег &lt;img&gt;. \n\nПриклад: \n\n&lt;img src='image.jpg' alt='Зображення'&gt; \n\nЦе вставить зображення з файлу 'image.jpg' з альтернативним текстом 'Зображення'. \n\nДетальніше: <a href='https://css.in.ua/html/tag/img'>Статья про &lt;img&gt;</a>"
    },
    {
      "id": 28,
      "text": "Які теги використовуються для визначення заголовка документа?",
      "hasOptions": false,
      "answer": "Для визначення заголовка документа в HTML використовується тег &lt;title&gt;. \n\nПриклад: \n\n&lt;title&gt;Заголовок&lt;/title&gt; \n\nЦе визначить заголовок документа як 'Заголовок'. \n\nДетальніше: <a href='https://css.in.ua/html/tag/title'>Статья про &lt;title&gt;</a>"
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "У чому різниця між «скиданням» і «нормалізацією» CSS? Що б ви вибрали і чому?",
      "hasOptions": false,
      "answer": "<b>Мета скидання CSS</b> - скинути всі стилі в нуль для того, щоб можна було розпочати стилізацію сайту з чистого аркуша. Недоліком скидання стилів є те, що їх частково доведеться встановлювати заново. \n<b>Ціль нормалізації</b> - привести вихідні стилі до єдиного стану, у всіх браузерах. Якщо розглядати Normalize.css, то з його допомогою не просто встановлюються певні значення стилів, а й вирішуються деякі проблеми відображення елементів, особливо в мобільних браузерах. \nВибирати між двома інструментами залежить від поставленого завдання."
    },
    {
      "id": 2,
      "text": "Що таке специфічність селекторів CSS і як вона працює?",
      "hasOptions": false,
      "answer": "Специфічність селекторів CSS визначає, який стиль буде застосований до елементу, якщо він має кілька правил, що конфліктують. Специфічність вимірюється числом, яке складається з чотирьох частин: \n\n- тег має специфічність 0001 \n- клас, а також псевдоклас і псевдоелемент мають специфічність 0010 \n- id має специфічність 0100 \n- інлайновий стиль має пріоритет 1000 \n\nЧим більше специфічність, тим вищий пріоритет має правило. Якщо два правила мають однакову специфічність, вони будуть застосовані в порядку їх визначення в коді. \n\nДетальніше: <a href='https://habr.com/ru/sandbox/47910/'>Статья про специфічність селекторів</a>"
    },

    {
      "id": 3,
      "text": "Що таке CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - це мова стилів, що використовується для опису зовнішнього вигляду та форматування документа, написаного мовою розмітки, такою як HTML. \nCSS дозволяє розробникам керувати макетом, шрифтами, кольорами та іншими стилістичними аспектами веб-сторінки. Він дозволяє розділити зміст веб-сторінки від її представлення, що полегшує редагування та підтримку веб-сайтів. \n\nДетальніше: <a href='https://css.in.ua/article/shcho-take-html_10'>Статья про CSS</a>"
    },
    {
      "id": 4,
      "text": "Чому зазвичай краще розміщувати підключення CSS у <head>, а <script> перед тегом </body>? Чи знаєте ви якісь винятки, наведіть приклади?",
      "hasOptions": false,
      "answer": "Стилі рекомендується підключати у head для того, щоб сторінка якнайшвидше набула свого зовнішнього вигляду. Скрипти, підключені в head, можуть уповільнити цей процес, тому їх рекомендується підключати перед закриваючим тегом body. Винятком є скрипти аналітики для визначення кількості відвідувачів, які не дочекалися завантаження сторінки. У цьому випадку скрипт має бути підключений у head."
    },
    {
      "id": 5,
      "text": "Що робить властивість 'z-index' у CSS?",
      "hasOptions": false,
      "answer": "Властивість 'z-index' у CSS контролює стековий порядок елементів по осі Z. Елемент із більшим значенням 'z-index' відображатиметься поверх елемента з меншим значенням 'z-index'. Це дозволяє контролювати порядок відображення елементів на сторінці. Значення 'z-index' може бути позитивним, негативним або 'auto'. \n\nДетальніше: <a href='https://css.in.ua/css/property/z-index'>Статья про 'z-index'</a>"
    },
    {
      "id": 6,
      "text": "Які є способи вирівняти div по центру?",
      "hasOptions": false,
      "answer": "Існує кілька способів вирівняти div у CSS, ось деякі з них:\n\n1. Використання властивості margin: <code>{ margin: 0 auto; }</code> \n2. Використання Flexbox: <code>{ display: flex; justify-content: center; align-items: center; }</code> \n3. Використання Grid Layout: <code>{ display: grid; place-items: center; }</code> \n4. Використання властивостей text-align та inline-block: <code>{ text-align: center; }</code> на батьківському елементі та <code>{ display: inline-block; }</code> на самому div."
    },
    {
      "id": 7,
      "text": "Яка властивість використовується для встановлення кольору фону?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Яка властивість дозволяє встановити зовнішні відступи елемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Яка властивість використовується для встановлення шрифту?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Яка властивість CSS дозволяє контролювати видимість елемента в DOM, але зберігає його місце?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Яка властивість CSS використовується для встановлення тіней елементів?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який селектор вибирає всі елементи .child, які є безпосередніми дочірніми елементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який селектор CSS вибирає всі елементи, що мають вказаний атрибут, який починається з певного рядка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Який селектор CSS вибирає всі елементи, що мають вказаний атрибут, який закінчується певним рядком?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Що таке чиста функція?",
      "hasOptions": false,
      "answer": "Це функція, яка повертає однаковий результат, коли викликається з одним і тим самим набором аргументів, а також не має побічних ефектів (side effects)."
    },
    {
      "id": 2,
      "text": "Що таке замикання?",
      "hasOptions": false,
      "answer": "Замикання – це здатність функції запам'ятовувати лексичне оточення, у якому вона була створена, тобто зберігати в собі посилання на це оточення та звертатися до нього."
    },
    {
      "id": 3,
      "text": "let VS const: чому краще використовувати const, коли це можливо?",
      "hasOptions": false,
      "answer": "Використання const дає дві переваги:\n1) Безпека: оголошення змінних через const захищає від неочікуваної зміни значення змінної у коді, що може часто призводити до помилок та неочікуваної поведінки програми.\n2) Читабельність: використання const дозволяє читачеві коду розуміти, що значення змінної не буде змінюватися протягом виконання програми. Це робить код більш зрозумілим і зменшує можливість помилок."
    },
    {
      "id": 4,
      "text": "Що таке проміси (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "Проміси – це об'єкти, які представляють результат асинхронної операції. Вони можуть перебувати в одному з трьох станів: очікування (pending), виконано (fulfilled) або відхилено (rejected)."
    },
    {
      "id": 5,
      "text": "Що таке деструктуризація в JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризація дозволяє витягати окремі властивості з об'єктів або елементи з масивів і присвоювати їх змінним у зручнішій формі. Наприклад, ось так ми можемо однією стрічкою витягти ім'я та адресу користувача з об'єкта user:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "Що таке стрілкові функції в JavaScript?",
      "hasOptions": false,
      "answer": "Стрілкові функції — це синтаксично компактний спосіб запису функцій у JavaScript, який не має свого власного 'this'. Вони часто використовуються для створення анонімних функцій."
    },
    {
      "id": 7,
      "text": "Що таке hoisting у JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — це механізм у JavaScript, за якого змінні та оголошення функцій переміщуються на верх своєї області видимості перед виконанням коду."
    },
    {
      "id": 8,
      "text": "Який метод використовується для додавання елемента в масив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Який об'єкт представляє поточне вікно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Який оператор використовується для порівняння на строгу рівність?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який метод використовується для видалення останнього елемента з масиву?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який метод у JavaScript використовується для перетворення об'єкта в рядок JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який об'єкт у JavaScript використовується для роботи з датою і часом?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Який метод масиву в JavaScript використовується для фільтрації елементів за певним критерієм?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "Что такое React JS?",
      "hasOptions": false,
      "answer": "React JS, или просто React, это открытая библиотека JavaScript для создания пользовательских интерфейсов, особенно для одностраничных приложений (SPA). Ключевые особенности React:\n1) Компонентный подход: React строится на концепции компонентов, что позволяет разработчикам создавать легко переиспользуемые куски кода;\n2) Виртуальный DOM: React использует виртуальный DOM для отслеживания изменений. Это абстракция реального DOM, что позволяет библиотеке обновлять только те части интерфейса, которые действительно изменились, вместо полного перерендеринга страницы. Это делает React относительно быстрым;\n3) Хуки: Введение хуков позволило использовать состояния и другие возможности классовых компонентов в функциональных компонентах, что сделало код более кратким и чистым;\n4) Сообщество и экосистема: React имеет большое и активное сообщество разработчиков, а также много библиотек и инструментов, созданных сообществом, что облегчает разработку сложных приложений."
    },
    {
      "id": 2,
      "text": "Для чего нужен атрибут key при рендере списков?",
      "hasOptions": false,
      "answer": "Ключи (keys) помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы массива с течением времени. Лучший способ выбрать ключ — это использовать строку, которая будет явно отличать элемент списка от его соседей. Лучше всего вы будете использовать ID из ваших данных как ключи. Индексы массива тоже можно использовать для этого, но только если элементы массива не добавляются в начало, не переставляются и не удаляются."
    },
    {
      "id": 3,
      "text": "Как работает проп children?",
      "hasOptions": false,
      "answer": "Некоторые компоненты не знают своих потомков заранее. Это особенно характерно для таких компонентов, как Sidebar или Dialog, которые представляют из себя как бы «коробку», в которую можно что-то положить. Для таких компонентов можно использовать специальный проп children, который передаст дочерние элементы сразу на вывод."
    },
    {
      "id": 4,
      "text": "Что такое порталы в React?",
      "hasOptions": false,
      "answer": "Порталы позволяют рендерить дочерние элементы в DOM-узел, который находится вне DOM-иерархии родительского компонента. Типовой случай применения порталов — когда в родительском компоненте заданы стили overflow: hidden или z-index, но вам нужно, чтобы дочерний элемент визуально выходил за рамки своего контейнера. Чаще всего, это диалоговые окна, всплывающие карточки и всплывающие подсказки."
    },
    {
      "id": 5,
      "text": "Что такое Reconciliation (Cверка)?",
      "hasOptions": false,
      "answer": "Это процесс, посредством которого React обновляет DOM. Когда состояние компонента изменяется, React должен рассчитать необходимость обновления DOM. Это делается путем создания виртуального DOM и сравнения его с текущим DOM. В этом контексте виртуальный DOM будет содержать новое состояние компонента."
    },
    {
      "id": 6,
      "text": "Для чего используется хук useEffect в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Выполнения побочных эффектов",
          "isCorrect": true
        },
        { "id": 3, "text": "Мемоизации значений", "isCorrect": false },
        {
          "id": 4,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Что будет, если вторым аргументом в useEffect передать пустой массив []?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Ошибка", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect будет запущен 0 раз",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect будет запущен 1 раз", "isCorrect": true },
        { "id": 4, "text": "Нет верного ответа", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Какой хук используется для создания состояния в компоненте?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Какой элемент используется для группировки элементов без добавления дополнительных узлов в DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "У нас есть массив со строками (arr), каждую из которых мы хотим отразить на странице. Какой метод массива нужно применить в return компонента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Какой элемент используется для обработки ошибок в дереве компонентов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой (какие) аргумент(ы) принимает хук useMemo?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Функцию и массив зависимостей", "isCorrect": true },
        { "id": 2, "text": "Функцию и объект опций", "isCorrect": false },
        { "id": 3, "text": "Функцию", "isCorrect": false },
        { "id": 4, "text": "Массив зависимостей", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Для чего используется хук useCallback в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Выполнения побочных эффектов",
          "isCorrect": false
        },
        { "id": 4, "text": "Мемоизации функций", "isCorrect": true }
      ]
    }
  ],
  "angular": [
    {
      "id": 1,
      "text": "Що таке Angular?",
      "hasOptions": false,
      "answer": "Angular — це платформа для розробки мобільних та настільних веб-додатків. Вона надає інструменти для розробки великих односторінкових додатків, які включають в себе такі функції, як динамічне завантаження, залежності та модулі."
    },
    {
      "id": 2,
      "text": "Які є основні переваги Angular?",
      "hasOptions": false,
      "answer": "Основні переваги Angular:\n1) Модульність: Angular дозволяє розбити додаток на модулі, що спрощує розробку та підтримку;\n2) Двостороннє зв'язування: Angular автоматично оновлює відображення даних при зміні моделі і навпаки;\n3) Директиви: Angular має вбудовані директиви, які дозволяють додавати до HTML нові функціональні можливості;\n4) Сервіси: Angular дозволяє створювати сервіси, які можна використовувати в усіх компонентах додатку;\n5) Тестування: Angular має вбудовані інструменти для тестування, що дозволяє легко писати та запускати тести."
    },
    {
      "id": 3,
      "text": "Які є основні компоненти Angular?",
      "hasOptions": false,
      "answer": "Основні компоненти Angular:\n1) Компоненти: Компоненти — це основні будівельні блоки Angular, які відповідають за відображення даних та логіку взаємодії з користувачем;\n2) Шаблони: Шаблони — це HTML-файли, які відображають дані та взаємодію компонентів з користувачем;\n3) Сервіси: Сервіси — це класи, які використовуються для виконання загальних завдань, таких як робота з сервером, логування тощо;\n4) Модулі: Модулі — це контейнери для компонентів, сервісів та інших ресурсів, які дозволяють організувати додаток на логічні блоки."
    },
    {
      "id": 4,
      "text": "Які є основні директиви Angular?",
      "hasOptions": false,
      "answer": "Основні директиви Angular:\n1) *ngIf: Директива *ngIf видаляє або додає елемент з DOM в залежності від умови;\n2) *ngFor: Директива *ngFor використовується для повторення елементів в шаблоні;\n3) *ngSwitch: Директива *ngSwitch використовується для вибору одного з декількох блоків відображення на основі умови;\n4) [ngClass]: Директива [ngClass] використовується для динамічного додавання класів до елементів в шаблоні."
    },
    {
      "id": 5,
      "text": "Які є основні події Angular?",
      "hasOptions": false,
      "answer": "Основні події Angular:\n1) ngOnInit: Метод ngOnInit викликається після того, як Angular відобразив перший компонент у представленні;\n2) ngOnDestroy: Метод ngOnDestroy викликається перед тим, як Angular видалить компонент з представлення;\n3) ngOnChanges: Метод ngOnChanges викликається, коли значення властивостей в компоненті змінюються;\n4) ngDoCheck: Метод ngDoCheck викликається при кожному циклі зміни."
    },
    {
      "id": 6,
      "text": "Які є основні сервіси Angular?",
      "hasOptions": false,
      "answer": "Основні сервіси Angular:\n1) HttpClient: Сервіс HttpClient використовується для взаємодії з сервером по протоколу HTTP;\n2) Router: Сервіс Router використовується для навігації між сторінками додатку;\n3) Form: Сервіс Form використовується для роботи з формами в Angular;\n4) Animation: Сервіс Animation використовується для створення анімацій в Angular."
    },
    {
      "id": 7,
      "text": "Які є основні методи життєвого циклу Angular?",
      "hasOptions": false,
      "answer": "Основні методи життєвого циклу Angular:\n1) ngOnInit: Метод ngOnInit викликається після того, як Angular відобразив перший компонент у представленні;\n2) ngOnDestroy: Метод ngOnDestroy викликається перед тим, як Angular видалить компонент з представлення;\n3) ngOnChanges: Метод ngOnChanges викликається, коли значення властивостей в компоненті змінюються;\n4) ngDoCheck: Метод ngDoCheck викликається при кожному циклі зміни."
    },
    {
      "id": 8,
      "text": "Які є основні події Angular?",
      "hasOptions": false,
      "answer": "Основні події Angular:\n1) ngOnInit: Метод ngOnInit викликається після того, як Angular відобразив перший компонент у представленні;\n2) ngOnDestroy: Метод ngOnDestroy викликається перед тим, як Angular видалить компонент з представлення;\n3) ngOnChanges: Метод ngOnChanges викликається, коли значення властивостей в компоненті змінюються;\n4) ngDoCheck: Метод ngDoCheck викликається при кожному циклі зміни."
    },
    {
      "id": 9,
      "text": "Які є основні директиви Angular?",
      "hasOptions": false,
      "answer": "Основні директиви Angular:\n1) *ngIf: Директива *ngIf видаляє або додає елемент з DOM в залежності від умови;\n2) *ngFor: Директива *ngFor використовується для повторення елементів в шаблоні;\n3) *ngSwitch: Директива *ngSwitch використовується для вибору одного з декількох блоків відображення на основі умови;\n4) [ngClass]: Директива [ngClass] використовується для динамічного додавання класів до елементів в шаблоні."
    },
    {
      "id": 10,
      "text": "Які є основні компоненти Angular?",
      "hasOptions": false,
      "answer": "Основні компоненти Angular:\n1) Компоненти: Компоненти — це основні будівельні блоки Angular, які відповідають за відображення даних та логіку взаємодії з користувачем;\n2) Шаблони: Шаблони — це HTML-файли, які відображають дані та взаємодію компонентів з користувачем;\n3) Сервіси: Сервіси — це класи, які використовуються для виконання загальних завдань, таких як робота з сервером, логування тощо;\n4) Модулі: Модулі — це контейнери для компонентів, сервісів та інших ресурсів, які дозволяють організувати додаток на логічні блоки."
    },
    {
      "id": 11,
      "text": "Які є основні переваги Angular?",
      "hasOptions": false,
      "answer": "Основні переваги Angular:\n1) Модульність: Angular дозволяє розбити додаток на модулі, що спрощує розробку та підтримку;\n2) Двостороннє зв'язування: Angular автоматично оновлює відображення даних при зміні моделі і навпаки;\n3) Директиви: Angular має вбудовані директиви, які дозволяють додавати до HTML нові функціональні можливості;\n4) Сервіси: Angular дозволяє створювати сервіси, які можна використовувати в усіх компонентах додатку;\n5) Тестування: Angular має вбудовані інструменти для тестування, що дозволяє легко писати та запускати тести."
    },
    {
      "id": 12,
      "text": "Що таке Angular?",
      "hasOptions": false,
      "answer": "Angular — це платформа для розробки мобільних та настільних веб-додатків. Вона надає інструменти для розробки великих односторінкових додатків, які включають в себе такі функції, як динамічне завантаження, залежності та модулі."
    },
    {
      "id": 13,
      "text": "Які є основні переваги Angular?",
      "hasOptions": false,
      "answer": "Основні переваги Angular:\n1) Модульність: Angular дозволяє розбити додаток на модулі, що спрощує розробку та підтримку;\n2) Двостороннє зв'язування: Angular автоматично оновлює відображення даних при зміні моделі і навпаки;\n3) Директиви: Angular має вбудовані директиви, які дозволяють додавати до HTML нові функціональні можливості;\n4) Сервіси: Angular дозволяє створювати сервіси, які можна використовувати в усіх компонентах додатку;\n5) Тестування: Angular має вбудовані інструменти для тестування, що дозволяє легко писати та запускати тести."
    }
  ]
}
